import streamlit as st
import json
import plotly.graph_objects as go

# --- Cargar JSON inicial ---
with open("datos.json", "r") as f:
    data = json.load(f)

# --- T√≠tulo y descripci√≥n ---
st.title(f"üìä Simulador Financiero - {data['empresa']} ({data['anio']})")
st.markdown("Ajusta los par√°metros para ver el impacto en facturaci√≥n, margen, EBITDA y utilizaci√≥n de equipos con gr√°ficos en tiempo real.")

# --- Sliders por l√≠nea de negocio ---
st.header("üéõÔ∏è Par√°metros - L√≠neas de Negocio")
for linea, valores in data['parametros']['lineas_negocio'].items():
    st.subheader(f"üîπ {linea}")
    valores['tarifa'] = st.slider(f"Tarifa {linea} (‚Ç¨)", 0, 2000, valores['tarifa'], 50)
    valores['unidades'] = st.number_input(f"N¬∫ {linea} (proyectos/licencias/contratos)", 0, 100, valores['unidades'])
    if valores['personas'] > 0:
        valores['personas'] = st.number_input(f"Personas dedicadas a {linea}", 0, 200, valores['personas'])
        valores['jornadas_por_persona'] = st.number_input(f"Jornadas/a√±o por persona en {linea}", 0, 300, valores['jornadas_por_persona'])
        valores['coste_medio_persona'] = st.number_input(f"Coste medio persona en {linea} (‚Ç¨)", 0, 100000, valores['coste_medio_persona'], 1000)

# --- Sliders de costes fijos ---
st.header("üéõÔ∏è Par√°metros - Costes Fijos")
for coste, valor in data['parametros']['costes_fijos'].items():
    data['parametros']['costes_fijos'][coste] = st.number_input(f"{coste.capitalize()} (‚Ç¨)", 0, 500000, int(valor), 1000)

# --- C√°lculos completos ---
facturacion_total = 0
jornadas_disponibles_totales = 0
jornadas_necesarias_totales = 0
costes_directos_totales = 0
facturacion_lineas = {}
utilizacion_lineas = {}

for linea, valores in data['parametros']['lineas_negocio'].items():
    # Facturaci√≥n por l√≠nea
    facturacion_linea = valores['unidades'] * valores['ticket_medio']
    facturacion_lineas[linea] = facturacion_linea
    facturacion_total += facturacion_linea

    # Jornadas necesarias
    jornadas_necesarias = facturacion_linea / valores['tarifa'] if valores['tarifa'] else 0
    jornadas_necesarias_totales += jornadas_necesarias

    # Jornadas disponibles
    jornadas_disponibles = valores['personas'] * valores['jornadas_por_persona']
    jornadas_disponibles_totales += jornadas_disponibles

    # Utilizaci√≥n por l√≠nea
    utilizacion = (jornadas_necesarias / jornadas_disponibles * 100) if jornadas_disponibles else 0
    utilizacion_lineas[linea] = round(utilizacion, 1)

    # Coste directo
    coste_directo_linea = valores['personas'] * valores['coste_medio_persona']
    costes_directos_totales += coste_directo_linea

# Subactividad
subactividad_jornadas = max(jornadas_disponibles_totales - jornadas_necesarias_totales, 0)
subactividad_coste = (subactividad_jornadas / jornadas_disponibles_totales) * costes_directos_totales if jornadas_disponibles_totales else 0

# Margen y EBITDA
margen_bruto = facturacion_total - costes_directos_totales
costes_fijos_totales = sum(data['parametros']['costes_fijos'].values())
ebitda = margen_bruto - costes_fijos_totales
ebitda_pct = (ebitda / facturacion_total) * 100 if facturacion_total else 0

# Utilizaci√≥n global
utilizacion_global = (jornadas_necesarias_totales / jornadas_disponibles_totales * 100) if jornadas_disponibles_totales else 0

# --- Mostrar m√©tricas principales ---
st.header("üìà Resultados Generales")
col1, col2, col3 = st.columns(3)
col1.metric("Facturaci√≥n Total", f"{facturacion_total:,.0f} ‚Ç¨")
col2.metric("Margen Bruto", f"{margen_bruto:,.0f} ‚Ç¨ ({(margen_bruto/facturacion_total)*100:.1f}%)")
col3.metric("EBITDA", f"{ebitda:,.0f} ‚Ç¨ ({ebitda_pct:.1f}%)")

st.metric("Utilizaci√≥n Global del Equipo", f"{utilizacion_global:.1f}%")
st.metric("Subactividad (coste)", f"{subactividad_coste:,.0f} ‚Ç¨")

# Alertas visuales
if utilizacion_global < 50:
    st.error("‚ö†Ô∏è Baja utilizaci√≥n: riesgo alto de subactividad")
elif utilizacion_global < 70:
    st.warning("üü° Utilizaci√≥n moderada: posible subactividad")
else:
    st.success("‚úÖ Buena utilizaci√≥n del equipo")

# --- Gr√°ficos din√°micos ---
st.header("üìä Visualizaciones")

# Gr√°fico 1: Facturaci√≥n por l√≠nea
fig1 = go.Figure([go.Bar(x=list(facturacion_lineas.keys()), y=list(facturacion_lineas.values()))])
fig1.update_layout(title="Facturaci√≥n por L√≠nea de Negocio", xaxis_title="L√≠nea", yaxis_title="Facturaci√≥n (‚Ç¨)")
st.plotly_chart(fig1, use_container_width=True)

# Gr√°fico 2: Utilizaci√≥n por l√≠nea
fig2 = go.Figure([go.Bar(x=list(utilizacion_lineas.keys()), y=list(utilizacion_lineas.values()), marker_color='orange')])
fig2.update_layout(title="Utilizaci√≥n por L√≠nea de Negocio (%)", xaxis_title="L√≠nea", yaxis_title="Utilizaci√≥n (%)")
st.plotly_chart(fig2, use_container_width=True)

# Gr√°fico 3: EBITDA vs Costes
fig3 = go.Figure()
fig3.add_trace(go.Bar(name="EBITDA", x=["EBITDA"], y=[ebitda]))
fig3.add_trace(go.Bar(name="Costes Fijos", x=["Costes Fijos"], y=[costes_fijos_totales]))
fig3.update_layout(title="EBITDA vs Costes Fijos", barmode='group', yaxis_title="‚Ç¨")
st.plotly_chart(fig3, use_container_width=True)

# --- Bot√≥n para descargar JSON actualizado ---
if st.button("üì• Descargar JSON Actualizado"):
    with open("json_actualizado.json", "w") as out:
        json.dump(data, out, indent=4)
    st.success("JSON actualizado guardado.")
